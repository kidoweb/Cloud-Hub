// js/admin.js
import { db, auth } from './firebase-config.js';
import {
  collection,
  getDocs,
  addDoc,
  doc,
  getDoc,
  updateDoc,
  deleteDoc,
} from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js';
import { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js';

// –≠–ª–µ–º–µ–Ω—Ç—ã
const addProductForm = document.getElementById('add-product-form');
const productsList = document.getElementById('products-list');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
onAuthStateChanged(auth, async (user) => {
  if (!user) {
    alert('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
    window.location.href = 'login.html';
    return;
  }

  const userDoc = await getDoc(doc(db, 'users', user.uid));
  if (userDoc.exists()) {
    const data = userDoc.data();
    if (data.role !== 'admin') {
      alert('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      window.location.href = 'index.html';
      return;
    }
  } else {
    alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    window.location.href = 'index.html';
    return;
  }

  loadProducts();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
if (addProductForm) {
  addProductForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const manufacturer = addProductForm['manufacturer'].value.trim();
    const name = addProductForm['name'].value.trim();
    const description = addProductForm['description'].value.trim();
    const price = parseFloat(addProductForm['price'].value);
    const imageUrl = addProductForm['imageUrl'].value.trim();
    const category = addProductForm['category'].value;

    if (
      !manufacturer ||
      !name ||
      !description ||
      isNaN(price) ||
      price < 0 ||
      !imageUrl ||
      !isValidUrl(imageUrl) ||
      !category
    ) {
      alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      return;
    }

    try {
      await addDoc(collection(db, 'products'), {
        manufacturer: manufacturer,
        name: name,
        description: description,
        price: parseFloat(price.toFixed(2)),
        imageUrl: imageUrl,
        category: category,
      });

      alert('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      addProductForm.reset();
      loadProducts();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function loadProducts() {
  try {
    const productsSnapshot = await getDocs(collection(db, 'products'));
    productsList.innerHTML = '';
    if (productsSnapshot.empty) {
      productsList.innerHTML = '<p>üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.</p>';
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DocumentFragment –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const fragment = document.createDocumentFragment();

    productsSnapshot.forEach((doc) => {
      const product = doc.data();
      const productItem = document.createElement('div');
      productItem.classList.add('admin-product-item');
      productItem.innerHTML = `
        <img src="${product.imageUrl}" alt="${product.name}" loading="lazy" onerror="this.src='https://via.placeholder.com/150?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'">
        <div class="admin-product-details">
          <h3>${product.manufacturer} - ${product.name}</h3>
          <p>${product.description}</p>
          <p>${product.price} —Ä.</p>
          <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}</p>
        </div>
        <div class="admin-product-actions">
          <button class="btn edit-btn" data-id="${doc.id}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          <button class="btn remove-item" data-id="${doc.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;
      fragment.appendChild(productItem);
    });

    productsList.appendChild(fragment);

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    productsList.addEventListener('click', (event) => {
      const target = event.target;
      const productId = target.getAttribute('data-id');
      if (target.classList.contains('edit-btn')) {
        showEditProductForm(productId);
      } else if (target.classList.contains('remove-item')) {
        deleteProduct(productId);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    productsList.innerHTML = '<p>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function deleteProduct(productId) {
  if (!confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) return;
  try {
    await deleteDoc(doc(db, 'products', productId));
    alert('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    loadProducts();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function showEditProductForm(productId) {
  try {
    const productDoc = await getDoc(doc(db, 'products', productId));
    if (!productDoc.exists()) {
      alert('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    const product = productDoc.data();

    if (document.getElementById(`edit-product-form-${productId}`)) return;

    const formHtml = `
      <div class="edit-product-form" id="edit-product-form-${productId}">
        <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä</h3>
        <form>
          <input type="text" name="manufacturer" placeholder="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å" value="${product.manufacturer}" required>
          <input type="text" name="name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value="${product.name}" required>
          <textarea name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" required>${product.description}</textarea>
          <input type="number" name="price" placeholder="–¶–µ–Ω–∞" value="${product.price}" required min="0" step="0.01">
          <input type="url" name="imageUrl" placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" value="${product.imageUrl}" required>
          <select name="category" required>
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
            <option value="–≤–µ–π–ø" ${product.category === '–≤–µ–π–ø' ? 'selected' : ''}>üö¨ –í–µ–π–ø</option>
            <option value="–∂–∏–¥–∫–æ—Å—Ç–∏" ${product.category === '–∂–∏–¥–∫–æ—Å—Ç–∏' ? 'selected' : ''}>üíß –ñ–∏–¥–∫–æ—Å—Ç–∏</option>
            <option value="—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏" ${product.category === '—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏' ? 'selected' : ''}>üõ†Ô∏è –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏</option>
          </select>
          <button type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button type="button" class="cancel-btn" data-id="${productId}">‚ùå –û—Ç–º–µ–Ω–∞</button>
        </form>
      </div>
    `;
    const productItem = document.querySelector(`button.edit-btn[data-id="${productId}"]`).closest('.admin-product-item');
    productItem.insertAdjacentHTML('beforeend', formHtml);

    const editForm = document.querySelector(`#edit-product-form-${productId} form`);
    editForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const manufacturer = editForm['manufacturer'].value.trim();
      const name = editForm['name'].value.trim();
      const description = editForm['description'].value.trim();
      const price = parseFloat(editForm['price'].value);
      const imageUrl = editForm['imageUrl'].value.trim();
      const category = editForm['category'].value;

      if (
        !manufacturer ||
        !name ||
        !description ||
        isNaN(price) ||
        price < 0 ||
        !imageUrl ||
        !isValidUrl(imageUrl) ||
        !category
      ) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        return;
      }

      try {
        await updateDoc(doc(db, 'products', productId), {
          manufacturer: manufacturer,
          name: name,
          description: description,
          price: parseFloat(price.toFixed(2)),
          imageUrl: imageUrl,
          category: category,
        });

        alert('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        closeEditForm(productId);
        loadProducts();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    const cancelBtn = document.querySelector(`#edit-product-form-${productId} .cancel-btn`);
    cancelBtn.addEventListener('click', () => {
      closeEditForm(productId);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function closeEditForm(productId) {
  const editFormContainer = document.getElementById(`edit-product-form-${productId}`);
  if (editFormContainer) {
    editFormContainer.remove();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL
function isValidUrl(url) {
  try {
    new URL(url);
    return true;
  } catch (_) {
    return false;
  }
}
// admin.js

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
let manufacturers = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
function updateManufacturerList() {
  const manufacturerList = document.getElementById('manufacturer-list');
  manufacturerList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

  manufacturers.forEach((manufacturer, index) => {
    const li = document.createElement('li');
    li.innerHTML = `${manufacturer} <button class="remove-manufacturer" data-index="${index}">–£–¥–∞–ª–∏—Ç—å</button>`;
    manufacturerList.appendChild(li);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
  document.querySelectorAll('.remove-manufacturer').forEach(button => {
    button.addEventListener('click', (e) => {
      const index = e.target.dataset.index;
      removeManufacturer(index);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
function addManufacturer(manufacturerName) {
  if (manufacturerName && !manufacturers.includes(manufacturerName)) {
    manufacturers.push(manufacturerName);
    updateManufacturerList();
    updateManufacturerFilter();
  } else {
    alert('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
function removeManufacturer(index) {
  manufacturers.splice(index, 1);
  updateManufacturerList();
  updateManufacturerFilter();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateManufacturerFilter() {
  const manufacturerSelect = document.getElementById('manufacturer-select');
  manufacturerSelect.innerHTML = '<option value="">üõ†Ô∏è –í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏</option>'; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

  manufacturers.forEach(manufacturer => {
    const option = document.createElement('option');
    option.value = manufacturer.toLowerCase();
    option.textContent = manufacturer;
    manufacturerSelect.appendChild(option);
  });
}

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
document.getElementById('add-manufacturer-form').addEventListener('submit', (event) => {
  event.preventDefault();
  const manufacturerInput = event.target.manufacturer;
  addManufacturer(manufacturerInput.value.trim());
  manufacturerInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –æ–±—ã—á–Ω–æ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
updateManufacturerList();
updateManufacturerFilter();
