// js/main.js
import { db, auth } from './firebase-config.js';
import { collection, getDocs, doc, getDoc, setDoc } from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js';
import { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js';

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const productsContainer = document.getElementById('products');
const searchInput = document.getElementById('search-input');
const categorySelect = document.getElementById('category-select');

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Firestore
let allProducts = [];

async function loadProducts() {
  try {
    const productsRef = collection(db, 'products');
    const productsSnapshot = await getDocs(productsRef);
    allProducts = [];
    productsSnapshot.forEach((doc) => {
      const product = { id: doc.id, ...doc.data() };
      allProducts.push(product);
    });
    displayProducts(allProducts);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    productsContainer.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
function displayProducts(products) {
  productsContainer.innerHTML = '';
  if (products.length === 0) {
    productsContainer.innerHTML = '<p>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
    return;
  }

  const fragment = document.createDocumentFragment();

  products.forEach((product) => {
    const productCard = document.createElement('div');
    productCard.classList.add('product-card');
    productCard.innerHTML = `
      <a href="product.html?id=${product.id}" class="product-link">
        <img src="${product.imageUrl}" alt="${product.name}" loading="lazy" 
             onerror="this.src='https://via.placeholder.com/280x200?text=–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ+–Ω–µ+–Ω–∞–π–¥–µ–Ω–æ'">
        <div class="product-info">
          <h3>${product.manufacturer} - ${product.name}</h3>
          <p>${product.description}</p>
          <p class="price">${product.price.toFixed(2)} —Ä.</p>
        </div>
      </a>
      <button class="add-to-cart" data-id="${product.id}">üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
    `;
    fragment.appendChild(productCard);
  });

  productsContainer.appendChild(fragment);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
  productsContainer.addEventListener('click', (event) => {
    if (event.target.classList.contains('add-to-cart')) {
      const productId = event.target.getAttribute('data-id');
      addToCart(productId);
    }
  });
}


function filterProducts() {
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const searchTerm = document.getElementById('search-input').value.toLowerCase();
  const selectedCategory = document.getElementById('category-select').value.toLowerCase();
  const selectedManufacturer = document.getElementById('manufacturer-select').value.toLowerCase();
  const minPrice = parseFloat(document.getElementById('price-min').value) || 0;
  const maxPrice = parseFloat(document.getElementById('price-max').value) || 1000;

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('Min Price:', minPrice, 'Max Price:', maxPrice);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
  const filteredProducts = allProducts.filter((product) => {
    const name = `${product.manufacturer} - ${product.name}`.toLowerCase();
    const description = product.description.toLowerCase();
    const category = product.category ? product.category.toLowerCase() : '';
    const manufacturer = product.manufacturer ? product.manufacturer.toLowerCase() : '';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const price = product.price ? parseFloat(product.price) : 0;

    // –õ–æ–≥–∏—Ä—É–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Product Price:', price);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const matchesSearch = name.includes(searchTerm) || description.includes(searchTerm);
    const matchesCategory = selectedCategory === '' || category === selectedCategory;
    const matchesManufacturer = selectedManufacturer === '' || manufacturer === selectedManufacturer;
    const matchesPrice = price >= minPrice && price <= maxPrice;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
    return matchesSearch && matchesCategory && matchesManufacturer && matchesPrice;
  });

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  displayProducts(filteredProducts);
}


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ –ë–î
async function addToCart(productId) {
  const user = auth.currentUser;
  if (!user) {
    alert('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.');
    window.location.href = 'login.html';
    return;
  }

  try {
    const cartRef = doc(db, 'carts', user.uid);
    const cartSnap = await getDoc(cartRef);
    let cart = [];

    if (cartSnap.exists()) {
      cart = cartSnap.data().items || [];
    }

    const existingItem = cart.find((item) => item.id === productId);
    if (existingItem) {
      existingItem.quantity += 1;
    } else {
      cart.push({ id: productId, quantity: 1 });
    }

    await setDoc(cartRef, { items: cart });
    alert('üõí –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
    updateCartCount();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
    alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
async function updateCartCount() {
  const cartCount = document.getElementById('cart-count');
  if (cartCount) {
    const user = auth.currentUser;
    if (user) {
      const cartRef = doc(db, 'carts', user.uid);
      const cartSnap = await getDoc(cartRef);
      if (cartSnap.exists()) {
        const cart = cartSnap.data().items || [];
        cartCount.textContent = cart.reduce((total, item) => total + item.quantity, 0);
      } else {
        cartCount.textContent = '0';
      }
    } else {
      cartCount.textContent = '0';
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (debounce)
function debounce(func, delay) {
  let timeout;
  return function () {
    clearTimeout(timeout);
    timeout = setTimeout(func, delay);
  };
}

if (searchInput) {
  searchInput.addEventListener('input', debounce(filterProducts, 300));
}

if (categorySelect) {
  categorySelect.addEventListener('change', filterProducts);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  loadProducts();
  updateCartCount();
});
