// js/auth.js
// –ü—É—Ç—å: js/auth.js
import { auth, db } from './firebase-config.js';
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  sendPasswordResetEmail,
  signOut,
  onAuthStateChanged,
  reauthenticateWithCredential,
  EmailAuthProvider,
} from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js';
import { doc, setDoc, getDoc } from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initElements() {
  const profileLink = document.getElementById('profile-link');
  const adminPanelLink = document.getElementById('admin-panel-link');
  const adminIcon = document.getElementById('admin-icon');

  if (!profileLink) {
    console.warn('–≠–ª–µ–º–µ–Ω—Ç —Å ID "profile-link" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
  if (!adminPanelLink) {
    console.warn('–≠–ª–µ–º–µ–Ω—Ç —Å ID "admin-panel-link" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
  if (!adminIcon) {
    console.warn('–≠–ª–µ–º–µ–Ω—Ç —Å ID "admin-icon" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  return { profileLink, adminPanelLink, adminIcon };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserData(user) {
  const { profileLink, adminPanelLink, adminIcon } = initElements();

  try {
    const userDoc = await getDoc(doc(db, 'users', user.uid));
    if (userDoc.exists()) {
      const userData = userDoc.data();

      // –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      if (profileLink) {
        profileLink.textContent = `üë§ ${userData.name || '–ü—Ä–æ—Ñ–∏–ª—å'}`;
        profileLink.href = 'profile.html';
      }

      // –ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      if (userData.role === 'admin') {
        if (adminPanelLink) {
          adminPanelLink.style.display = 'inline-block';
        }
        if (adminIcon) {
          adminIcon.style.display = 'flex';
        }
      } else {
        if (adminPanelLink) {
          adminPanelLink.style.display = 'none';
        }
        if (adminIcon) {
          adminIcon.style.display = 'none';
        }
      }

      // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
      updateCartCount();
    } else {
      console.warn('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Firestore.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
onAuthStateChanged(auth, (user) => {
  const { profileLink, adminPanelLink, adminIcon } = initElements();

  if (user) {
    updateUserData(user);
  } else {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (profileLink) {
      profileLink.textContent = 'üîë –í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
      profileLink.href = 'login.html';
    }
    // –°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (adminPanelLink) {
      adminPanelLink.style.display = 'none';
    }
    if (adminIcon) {
      adminIcon.style.display = 'none';
    }
    // –û–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
    const cartCount = document.getElementById('cart-count');
    if (cartCount) {
      cartCount.textContent = '0';
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
function updateCartCount() {
  const cartCount = document.getElementById('cart-count');
  if (cartCount) {
    fetchCartFromDB()
      .then((count) => {
        cartCount.textContent = count;
      })
      .catch(() => {
        cartCount.textContent = '0';
      });
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑ –ë–î
async function fetchCartFromDB() {
  const user = auth.currentUser;
  if (!user) return '0';

  try {
    const cartDoc = await getDoc(doc(db, 'carts', user.uid));
    if (cartDoc.exists()) {
      const cart = cartDoc.data().items || [];
      return cart.reduce((total, item) => total + item.quantity, 0).toString();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã:', error);
    return '0';
  }

  return '0';
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerForm = document.getElementById('register-form');
if (registerForm) {
  registerForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const name = registerForm['name'].value.trim();
    const email = registerForm['email'].value.trim();
    const password = registerForm['password'].value.trim();

    if (name === '' || email === '' || password === '') {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
      return;
    }

    if (password.length < 6) {
      alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
      await setDoc(doc(db, 'users', user.uid), {
        name: name,
        email: email,
        address: '',
        phoneNumber: '',
        role: 'user', // –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      });

      alert('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
      registerForm.reset();
      window.location.href = 'profile.html';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      alert('‚ùå ' + error.message);
    }
  });
}

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const loginForm = document.getElementById('login-form');
if (loginForm) {
  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = loginForm['email'].value.trim();
    const password = loginForm['password'].value.trim();

    if (email === '' || password === '') {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
      return;
    }

    try {
      await signInWithEmailAndPassword(auth, email, password);
      alert('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      loginForm.reset();
      window.location.href = 'profile.html';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      alert('‚ùå ' + error.message);
    }
  });
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
const resetForm = document.getElementById('reset-form');
if (resetForm) {
  resetForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = resetForm['email'].value.trim();

    if (email === '') {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.');
      return;
    }

    try {
      await sendPasswordResetEmail(auth, email);
      alert('üìß –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email.');
      resetForm.reset();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
      alert('‚ùå ' + error.message);
    }
  });
}

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const logoutButton = document.getElementById('logout-btn');
if (logoutButton) {
  logoutButton.addEventListener('click', async () => {
    try {
      await signOut(auth);
      alert('üëã –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      window.location.href = 'index.html';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      alert('‚ùå ' + error.message);
    }
  });
}
