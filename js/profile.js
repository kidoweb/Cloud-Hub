// js/profile.js
// –ü—É—Ç—å: js/profile.js
import { auth, db } from './firebase-config.js';
import {
  doc,
  getDoc,
  updateDoc,
  collection,
  getDocs,
  query,
  where,
  orderBy,
  Timestamp, // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Timestamp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
} from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js';
import { updatePassword, EmailAuthProvider, reauthenticateWithCredential } from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js';
import { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js';

// –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è
const userName = document.getElementById('user-name');
const userAddress = document.getElementById('user-address');
const userPhone = document.getElementById('user-phone');
const userEmail = document.getElementById('user-email');
const editProfileBtn = document.getElementById('edit-profile-btn');
const changePasswordBtn = document.getElementById('change-password-btn');
const logoutButton = document.getElementById('logout-btn');
const adminIcon = document.getElementById('admin-icon');
const orderHistoryContainer = document.getElementById('order-history');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
onAuthStateChanged(auth, async (user) => {
  if (user) {
    const userDoc = await getDoc(doc(db, 'users', user.uid));
    if (userDoc.exists()) {
      const data = userDoc.data();
      userName.textContent = data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      userAddress.textContent = data.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      userPhone.textContent = data.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      userEmail.textContent = data.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

      if (data.role === 'admin') {
        if (adminIcon) {
          adminIcon.style.display = 'flex';
        }
      } else {
        if (adminIcon) {
          adminIcon.style.display = 'none';
        }
      }

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
      loadOrderHistory(user.uid);
    }
  } else {
    window.location.href = 'login.html';
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
async function loadOrderHistory(userId) {
  try {
    const ordersRef = collection(db, 'orders');
    const q = query(ordersRef, where('userId', '==', userId), orderBy('timestamp', 'desc'));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      orderHistoryContainer.innerHTML = '<p>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>';
      return;
    }

    orderHistoryContainer.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

    querySnapshot.forEach((doc) => {
      const order = doc.data();
      const orderElement = document.createElement('div');
      orderElement.classList.add('order-item');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–ª—è timestamp
      let orderDate;
      if (order.timestamp instanceof Timestamp) {
        orderDate = order.timestamp.toDate().toLocaleString();
      } else if (order.timestamp && order.timestamp.seconds) {
        // –ï—Å–ª–∏ timestamp - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º seconds
        orderDate = new Date(order.timestamp.seconds * 1000).toLocaleString();
      } else {
        orderDate = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      }

      orderElement.innerHTML = `
        <h4>–ó–∞–∫–∞–∑ ‚Ññ${doc.id}</h4>
        <p>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${orderDate}</p>
        <p>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${order.finalPrice.toFixed(2)} ‚ÇΩ</p>
        <p>–°–∫–∏–¥–∫–∞: ${order.discount}%</p>
        <p>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${order.paymentMethod === 'card' ? '–û–ø–ª–∞—á–µ–Ω–æ' : '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ'}</p>
        <button class="view-details" data-id="${doc.id}">üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏</button>
      `;
      orderHistoryContainer.appendChild(orderElement);
    });

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏"
    orderHistoryContainer.addEventListener('click', async (event) => {
      if (event.target.classList.contains('view-details')) {
        const orderId = event.target.getAttribute('data-id');
        await showOrderDetails(orderId);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    orderHistoryContainer.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤.</p>';
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
async function showOrderDetails(orderId) {
  try {
    const orderDoc = await getDoc(doc(db, 'orders', orderId));
    if (orderDoc.exists()) {
      const order = orderDoc.data();
      const orderDetails = document.createElement('div');
      orderDetails.classList.add('order-details');
      let itemsHtml = '';

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.all –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const itemPromises = order.items.map(async (item) => {
        const productDoc = await getDoc(doc(db, 'products', item.id));
        if (productDoc.exists()) {
          const product = productDoc.data();
          return `
            <div class="order-product">
              <p>${product.manufacturer} - ${product.name}</p>
              <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}</p>
              <p>–¶–µ–Ω–∞: ${product.price.toFixed(2)} ‚ÇΩ</p>
            </div>
          `;
        } else {
          return `<div class="order-product"><p>–¢–æ–≤–∞—Ä —Å ID ${item.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.</p></div>`;
        }
      });

      const itemsHtmlArray = await Promise.all(itemPromises);
      itemsHtml = itemsHtmlArray.join('');

      orderDetails.innerHTML = `
        <h4>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId}</h4>
        ${itemsHtml}
        <button class="close-details">‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
      `;

      orderHistoryContainer.appendChild(orderDetails);

      const closeDetailsButton = orderDetails.querySelector('.close-details');
      closeDetailsButton.addEventListener('click', () => {
        orderDetails.remove();
      });
    } else {
      alert('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞:', error);
    alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.');
  }
}

// –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
if (editProfileBtn) {
  editProfileBtn.addEventListener('click', () => {
    showEditProfileForm();
  });
}

function showEditProfileForm() {
  if (document.getElementById('edit-profile-form')) return;

  const formHtml = `
    <div class="edit-profile-container">
      <h3>‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</h3>
      <form id="edit-profile-form">
        <input type="text" name="name" placeholder="üë§ –ò–º—è" required>
        <input type="text" name="address" placeholder="üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏">
        <input type="tel" name="phoneNumber" placeholder="üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä">
        <button type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button type="button" class="cancel-btn">‚ùå –û—Ç–º–µ–Ω–∞</button>
      </form>
    </div>
  `;
  const profileInfo = document.getElementById('profile-info');
  profileInfo.insertAdjacentHTML('beforeend', formHtml);

  const editForm = document.getElementById('edit-profile-form');
  editForm['name'].value = userName.textContent !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ? userName.textContent : '';
  editForm['address'].value = userAddress.textContent !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ? userAddress.textContent : '';
  editForm['phoneNumber'].value = userPhone.textContent !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ? userPhone.textContent : '';

  editForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const name = editForm['name'].value.trim();
    const address = editForm['address'].value.trim();
    const phoneNumber = editForm['phoneNumber'].value.trim();

    try {
      const user = auth.currentUser;
      const userRef = doc(db, 'users', user.uid);
      await updateDoc(userRef, {
        name: name,
        address: address,
        phoneNumber: phoneNumber,
      });

      alert('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
      userName.textContent = name;
      userAddress.textContent = address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      userPhone.textContent = phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

      editForm.parentElement.remove();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  const cancelBtn = document.querySelector('.cancel-btn');
  cancelBtn.addEventListener('click', () => {
    const editFormContainer = document.getElementById('edit-profile-form').parentElement;
    if (editFormContainer) {
      editFormContainer.remove();
    }
  });
}

// –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
if (changePasswordBtn) {
  changePasswordBtn.addEventListener('click', () => {
    showChangePasswordForm();
  });
}

function showChangePasswordForm() {
  if (document.getElementById('change-password-form')) return;

  const formHtml = `
    <div class="change-password-container">
      <h3>üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</h3>
      <form id="change-password-form">
        <input type="password" name="current-password" placeholder="üîë –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" required>
        <input type="password" name="new-password" placeholder="üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" required minlength="6">
        <button type="submit">üîë –°–º–µ–Ω–∏—Ç—å</button>
        <button type="button" class="cancel-btn">‚ùå –û—Ç–º–µ–Ω–∞</button>
      </form>
    </div>
  `;
  const profileInfo = document.getElementById('profile-info');
  profileInfo.insertAdjacentHTML('beforeend', formHtml);

  const changePasswordForm = document.getElementById('change-password-form');
  changePasswordForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const currentPassword = changePasswordForm['current-password'].value.trim();
    const newPassword = changePasswordForm['new-password'].value.trim();

    if (newPassword.length < 6) {
      alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    try {
      const user = auth.currentUser;
      const credential = EmailAuthProvider.credential(user.email, currentPassword);
      await reauthenticateWithCredential(user, credential);

      await updatePassword(user, newPassword);
      alert('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
      changePasswordForm.parentElement.remove();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
      if (error.code === 'auth/wrong-password') {
        alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å.');
      } else {
        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  });

  const cancelBtn = document.querySelector('.change-password-container .cancel-btn');
  cancelBtn.addEventListener('click', () => {
    const changePasswordFormContainer = document.getElementById('change-password-form').parentElement;
    if (changePasswordFormContainer) {
      changePasswordFormContainer.remove();
    }
  });
}

// –ò–∫–æ–Ω–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (adminIcon) {
  adminIcon.addEventListener('click', () => {
    window.location.href = 'admin.html';
  });
}

// –í—ã—Ö–æ–¥
if (logoutButton) {
  logoutButton.addEventListener('click', async () => {
    try {
      await auth.signOut();
      alert('üëã –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      window.location.href = 'index.html';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}
